import asyncio
import logging
import aiosqlite
import aiocron
from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMINS = list(map(int, getenv("ADMINS", "").split(","))) if getenv("ADMINS") else []
DB_PATH = getenv("DB_PATH", "reports.db")
EMPLOYEE_CODE = getenv("EMPLOYEE_CODE")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                full_name TEXT NOT NULL,
                photo_id TEXT,
                report_text TEXT,
                report_date TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        await db.commit()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.from_user.full_name

    if user_id in ADMINS:
        await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω {full_name}!\n\nüìä /admin_reports ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á—ë—Ç–æ–≤.")
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    if user:
        await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user[0]}! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞.")
    else:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await state.set_state("waiting_for_code")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
@dp.message(F.text, StateFilter("waiting_for_code"))
async def process_registration_code(message: types.Message, state: FSMContext):
    if message.text == EMPLOYEE_CODE:
        user_id = message.from_user.id
        full_name = message.from_user.full_name

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT INTO users (user_id, full_name) VALUES (?, ?)", (user_id, full_name))
            await db.commit()

        await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!\n\nüìù /–æ—Ç—á–µ—Ç ‚Äî –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç")
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def is_registered(user_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone() is not None

# === –ö–æ–º–∞–Ω–¥–∞ /–æ—Ç—á–µ—Ç ===
@dp.message(Command("–æ—Ç—á–µ—Ç"))
async def start_report(message: types.Message, state: FSMContext):
    if await is_registered(message.from_user.id):
        await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞:")
        await state.set_state("waiting_for_photo_or_text")
    else:
        await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ ===
@dp.message(F.photo, StateFilter("waiting_for_photo_or_text"))
async def receive_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞):")
    await state.set_state("waiting_for_text")

@dp.message(F.text, StateFilter("waiting_for_text", "waiting_for_photo_or_text"))
async def receive_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get('photo_id')
    report_text = message.text
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    today = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO reports (user_id, full_name, photo_id, report_text, report_date) VALUES (?, ?, ?, ?, ?)",
            (user_id, full_name, photo_id, report_text, today)
        )
        await db.commit()

    await message.answer("‚úÖ –í–∞—à –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

# === –ö–æ–º–∞–Ω–¥–∞ /admin_reports (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
@dp.message(Command("admin_reports"))
async def send_reports_now(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    start_of_week = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT full_name, photo_id, report_text, report_date FROM reports WHERE report_date >= ?", (start_of_week,)
        ) as cursor:
            reports = await cursor.fetchall()

    if not reports:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é.")
        return

    for report in reports:
        full_name, photo_id, report_text, report_date = report
        caption = f"üë§ {full_name}\nüìÖ {report_date}"
        if report_text:
            caption += f"\nüìù {report_text}"

        if photo_id:
            await bot.send_photo(message.chat.id, photo=photo_id, caption=caption)
        else:
            await message.answer(caption)

# === –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 00:00 ===
@aiocron.crontab("0 0 * * 0")
async def scheduled_reports():
    start_of_week = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")

    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: /admin_reports —Å {start_of_week}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
