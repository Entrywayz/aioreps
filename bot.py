import asyncio
import logging
import aiosqlite
import os
import aiocron
import random
from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMINS = list(map(int, getenv("ADMINS", "").split(","))) if getenv("ADMINS") else []
DB_PATH = getenv("DB_PATH", "reports.db")
EMPLOYEE_CODE = str(getenv("EMPLOYEE_CODE"))  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
logging.info(f"–ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ .env: {EMPLOYEE_CODE}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

VIDEO_FILES = {
    "personal_cabinet": "lc.mp4",
    "my_reports": "reports.mp4",
    "reports": "report.mp4",
    "tasks": "tasks.mp4",
    "motivation": "motivation.mp4"
}

async def send_video(message: types.Message, video_key: str, caption: str = "") -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è aiogram
    :param video_key: –ö–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è VIDEO_FILES
    :param caption: –ü–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ
    :return: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞, False –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        current_dir = Path(__file__).parent
        video_filename = VIDEO_FILES.get(video_key)
        if not video_filename:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –≤–∏–¥–µ–æ: {video_key}")
            return False
        
        video_path = current_dir / video_filename
        if not video_path.exists():
            logging.error(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            await message.answer("‚ö† –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        video = FSInputFile(path=str(video_path))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º reply_markup=None
        await message.answer_video(video=video, caption=caption, supports_streaming=True)
        return True
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video_key}: {str(e)}")
        await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. {caption}")
        return False


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_employee_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")],
            [KeyboardButton(text="üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")],
            [KeyboardButton(text="üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã")]
        ],
        resize_keyboard=True
    )

def get_report_period_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –ù–µ–¥–µ–ª—è")],
            [KeyboardButton(text="üìÜ –í—ã–±—Ä–∞—Ç—å –ü–µ—Ä–∏–æ–¥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

VIDEO_MESSAGES = {
    "personal_cabinet": "lc.mp4",
    "my_reports": "reports.mp4",
    "reports": "report.mp4",
    "tasks": "tasks.mp4",
    "motivation": "motivation.mp4"
}

def get_task_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –û—Å–Ω–æ–≤–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_approval_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å")],
            [KeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –î–æ—Ä–∞–±–æ—Ç–∫—É")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL,
                position TEXT NOT NULL DEFAULT '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                full_name TEXT NOT NULL,
                photo_id TEXT,
                report_text TEXT,
                report_date TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                task_type TEXT NOT NULL,
                task_text TEXT NOT NULL,
                task_date TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è',
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        await db.commit()

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ===
async def get_employees():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id, full_name, position FROM users") as cursor:
            employees = await cursor.fetchall()
    return employees

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.from_user.full_name

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) –Ω–∞–∂–∞–ª /start")

    if user_id in ADMINS:
        await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω {full_name}!", reply_markup=get_admin_keyboard())
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    if user:
        await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user[0]}!", reply_markup=get_employee_keyboard())
    else:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await state.set_state("waiting_for_code")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
@dp.message(F.text, StateFilter("waiting_for_code"))
async def process_registration_code(message: types.Message, state: FSMContext):
    user_input = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if user_input == EMPLOYEE_CODE:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–æ–¥–æ–º –∏–∑ .env
        user_id = message.from_user.id
        full_name = message.from_user.full_name

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT INTO users (user_id, full_name) VALUES (?, ?)", (user_id, full_name))
            await db.commit()

        await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!", reply_markup=get_employee_keyboard())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç ===
@dp.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    res = "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞:"
    await send_video(message, "reports", res)
    await state.set_state("waiting_for_photo_or_text")

@dp.message(F.photo, StateFilter("waiting_for_photo_or_text"))
async def receive_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞):")
    await state.set_state("waiting_for_text")

@dp.message(F.text, StateFilter("waiting_for_text", "waiting_for_photo_or_text"))
async def receive_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get('photo_id')
    report_text = message.text
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    today = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO reports (user_id, full_name, photo_id, report_text, report_date, status) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, full_name, photo_id, report_text, today, "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        )
        await db.commit()

    await message.answer("‚úÖ –í–∞—à –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=get_employee_keyboard())
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ
    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üì• –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç {full_name}.\nüìÖ –î–∞—Ç–∞: {today}")

# === –ú–æ–∏ –û—Ç—á–µ—Ç—ã ===
@dp.message(F.text == "üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")
async def my_reports(message: types.Message):
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT report_date, report_text, status FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()

    if not reports:
        resp = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."
        await send_video(message, "reports", resp)
        return

    response = "üìä –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n"
    for report_date, report_text, status in reports:
        response += f"üìÖ {report_date}\nüìù {report_text}\nüîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await send_video(message, "reports", response)

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            submitted = (await cursor.fetchone())[0]

        start = datetime.strptime(start_date, "%d.%m.%Y")
        end = datetime.strptime(end_date, "%d.%m.%Y")
        total_days = (end - start).days + 1
        missed = total_days - submitted

    caption = (
        f"üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n"
        f"‚úÖ –°–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {submitted}\n"
        f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {missed}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    await send_video(message, "personal_cabinet", caption)

# === –ú–æ–∏ –ó–∞–¥–∞—á–∏ ===
@dp.message(F.text == "üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")
async def my_tasks(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT task_type, task_text, task_date FROM tasks WHERE user_id = ? AND status = '–ù–æ–≤–∞—è'",
            (user_id,)
        ) as cursor:
            tasks = await cursor.fetchall()

    if not tasks:
        resp = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."
        await send_video(message, "tasks", resp)
        return

    response = "üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    for task_type, task_text, task_date in tasks:
        response += f"üìÖ {task_date}\nüìã {task_type}: {task_text}\n\n"

    
    await send_video(message, "tasks", response)

# === –ú–æ—Ç–∏–≤–∞—Ü–∏—è ===
@dp.message(F.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def send_motivation(message: types.Message):
    motivations = [
        "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ",
        "–¢—ã ‚Äî –∑–≤–µ–∑–¥–∞! –°–∏—è–π —è—Ä—á–µ! ‚ú®",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º! üèÜ"
    ]
    motivation = random.choice(motivations)
    await send_video(message, "motivation", motivation)

# === –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–ê–¥–º–∏–Ω) ===
@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def employee_rating(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT full_name, COUNT(*) as report_count FROM reports GROUP BY user_id ORDER BY report_count DESC"
        ) as cursor:
            rating = await cursor.fetchall()

    if not rating:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        return

    response = "üèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç—á—ë—Ç–æ–≤:\n"
    for idx, (full_name, report_count) in enumerate(rating, start=1):
        response += f"{idx}. {full_name}: {report_count} –æ—Ç—á—ë—Ç–æ–≤\n"

    await message.answer(response)

# === –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã (–ê–¥–º–∏–Ω) ===
@dp.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã")
async def check_reports(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT id, full_name, photo_id, report_text, report_date FROM reports WHERE status = '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' AND report_date BETWEEN ? AND ? ORDER BY full_name",
            (start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()

    if not reports:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(reports=reports)
    await message.answer("üìä –û—Ç—á—ë—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:", reply_markup=get_approval_keyboard())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–∏–Ω—è—Ç—å" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É" ===
@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
async def approve_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reports = data.get("reports", [])

    if not reports:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    report_id, full_name, photo_id, report_text, report_date = reports[0]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE reports SET status = '–ü—Ä–∏–Ω—è—Ç' WHERE id = ?",
            (report_id,)
        )
        await db.commit()

    await message.answer(f"‚úÖ –û—Ç—á—ë—Ç –æ—Ç {full_name} –∑–∞ {report_date} –ø—Ä–∏–Ω—è—Ç.")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id FROM reports WHERE id = ?", (report_id,)) as cursor:
            user_id = (await cursor.fetchone())[0]

    await bot.send_message(user_id, f"‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} –ø—Ä–∏–Ω—è—Ç.")

@dp.message(F.text == "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –î–æ—Ä–∞–±–æ—Ç–∫—É")
async def send_for_revision(message: types.Message, state: FSMContext):
    await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")
    await state.set_state("waiting_for_revision_reason")

@dp.message(F.text, StateFilter("waiting_for_revision_reason"))
async def process_revision_reason(message: types.Message, state: FSMContext):
    reason = message.text
    data = await state.get_data()
    reports = data.get("reports", [])

    if not reports:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return

    report_id, full_name, photo_id, report_text, report_date = reports[0]

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE reports SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ' WHERE id = ?",
            (report_id,)
        )
        await db.commit()

    await message.answer(f"üîÑ –û—Ç—á—ë—Ç –æ—Ç {full_name} –∑–∞ {report_date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id FROM reports WHERE id = ?", (report_id,)) as cursor:
            user_id = (await cursor.fetchone())[0]

    await bot.send_message(user_id, f"üîÑ –í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
