import asyncio
import logging
import aiosqlite
import asyncio
import logging
import aiosqlite
import os
import aiocron
import random
from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMINS = list(map(int, getenv("ADMINS", "").split(","))) if getenv("ADMINS") else []
DB_PATH = getenv("DB_PATH", "reports.db")
EMPLOYEE_CODE = str(getenv("EMPLOYEE_CODE"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename="bot.log"
)
logger = logging.getLogger(__name__)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ü—É—Ç–∏ –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º
VIDEO_FILES = {
    "personal_cabinet": "lc.mp4",
    "my_reports": "reports.mp4",
    "reports": "report.mp4",
    "tasks": "tasks.mp4",
    "motivation": "motivation.mp4"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
for video_key, filename in VIDEO_FILES.items():
    if not Path(filename).exists():
        logger.warning(f"–í–∏–¥–µ–æ—Ñ–∞–π–ª {filename} –¥–ª—è –∫–ª—é—á–∞ {video_key} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

async def send_video(message: types.Message, video_key: str, caption: str = "") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        video_filename = VIDEO_FILES.get(video_key)
        if not video_filename:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –≤–∏–¥–µ–æ: {video_key}")
            return False
        
        video_path = Path(video_filename)
        if not video_path.exists():
            logger.error(f"–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            await message.answer("‚ö† –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
            return False
        
        video = FSInputFile(path=str(video_path))
        await message.answer_video(
            video=video, 
            caption=caption[:1024],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏
            supports_streaming=True
        )
        return True
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video_key}: {str(e)}", exc_info=True)
        await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. {caption[:1024]}")
        return False
# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard(is_admin: bool = False):
    if is_admin:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã")],
                [KeyboardButton(text="üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏")],
                [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
                [KeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")],
                [KeyboardButton(text="üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã"), KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")],
                [KeyboardButton(text="üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏"), KeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )

def get_back_only_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True,
        input_field_placeholder="..."
    )

def get_report_period_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –ù–µ–¥–µ–ª—è")],
            [KeyboardButton(text="üìÜ –í—ã–±—Ä–∞—Ç—å –ü–µ—Ä–∏–æ–¥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥..."
    )

def get_task_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –û—Å–Ω–æ–≤–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏..."
    )

def get_approval_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –î–æ—Ä–∞–±–æ—Ç–∫—É")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("PRAGMA journal_mode=WAL")  # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ë–î
            await db.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    full_name TEXT NOT NULL,
                    position TEXT NOT NULL DEFAULT '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                    registered_at TEXT DEFAULT CURRENT_TIMESTAMP
                )""")
            await db.execute("""
                CREATE TABLE IF NOT EXISTS reports (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    full_name TEXT NOT NULL,
                    photo_id TEXT,
                    report_text TEXT,
                    report_date TEXT NOT NULL,
                    status TEXT NOT NULL DEFAULT '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
                )""")
            await db.execute("""
                CREATE TABLE IF NOT EXISTS tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    task_type TEXT NOT NULL,
                    task_text TEXT NOT NULL,
                    task_date TEXT NOT NULL,
                    status TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è',
                    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
                )""")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_reports_user_id ON reports(user_id)")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_reports_status ON reports(status)")
            await db.execute("CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON tasks(user_id)")
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}", exc_info=True)
        raise

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===
async def on_startup():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await init_db()
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, "üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def on_shutdown():
    logger.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.from_user.full_name

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) –Ω–∞–∂–∞–ª /start")

    if user_id in ADMINS:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hd.bold('–∞–¥–º–∏–Ω')} {hd.quote(full_name)}!",
            reply_markup=get_main_keyboard(is_admin=True)
        )
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    if user:
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {hd.quote(user[0])}!",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state("waiting_for_code")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
@dp.message(F.text, StateFilter("waiting_for_code"))
async def process_registration_code(message: types.Message, state: FSMContext):
    user_input = message.text.strip()
    if user_input == EMPLOYEE_CODE:
        user_id = message.from_user.id
        full_name = message.from_user.full_name

        try:
            async with aiosqlite.connect(DB_PATH) as db:
                await db.execute(
                    "INSERT INTO users (user_id, full_name) VALUES (?, ?)",
                    (user_id, full_name)
                )
                await db.commit()

            await message.answer(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {hd.quote(full_name)}!",
                reply_markup=get_main_keyboard()
            )
            await state.clear()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            for admin_id in ADMINS:
                await bot.send_message(
                    admin_id,
                    f"üÜï –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:\n"
                    f"üë§ {full_name}\n"
                    f"üÜî {user_id}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ ===
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.clear()
    
    if user_id in ADMINS:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(is_admin=True)
        )
    else:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )

# === –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç ===
@dp.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            if not await cursor.fetchone():
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
                return

    res = "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞:"
    await send_video(message, "my_reports", res)
    await message.answer(res, reply_markup=get_back_only_keyboard())
    await state.set_state("waiting_for_photo_or_text")

@dp.message(F.photo, StateFilter("waiting_for_photo_or_text"))
async def receive_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer(
        "‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'):", 
        reply_markup=get_back_only_keyboard()
    )
    await state.set_state("waiting_for_text")

@dp.message(F.text, StateFilter("waiting_for_text", "waiting_for_photo_or_text"))
async def receive_text(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return
    
    data = await state.get_data()
    photo_id = data.get('photo_id')
    report_text = message.text if message.text.lower() != "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è" else None
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    today = datetime.now().strftime("%d.%m.%Y")

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT INTO reports (user_id, full_name, photo_id, report_text, report_date) VALUES (?, ?, ?, ?, ?)",
                (user_id, full_name, photo_id, report_text, today)
            )
            await db.commit()

        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üì• –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç {hd.bold(full_name)}.\n"
                    f"üìÖ –î–∞—Ç–∞: {hd.quote(today)}\n"
                    f"üÜî ID: {user_id}"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()

# === –ú–æ–∏ –û—Ç—á–µ—Ç—ã ===
@dp.message(F.text == "üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")
async def my_reports(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            if not await cursor.fetchone():
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
                return

    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT report_date, report_text, status FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ? ORDER BY report_date DESC",
                (user_id, start_date, end_date)
            ) as cursor:
                reports = await cursor.fetchall()

        if not reports:
            resp = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."
            await send_video(message, "reports", resp)
            return

        response = "üìä –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
        for report_date, report_text, status in reports:
            response += f"üìÖ <b>{report_date}</b>\n"
            if report_text:
                response += f"üìù {report_text}\n"
            response += f"üîÑ –°—Ç–∞—Ç—É—Å: <i>{status}</i>\n\n"

        await send_video(message, "reports", response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç ===
@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            if not await cursor.fetchone():
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
                return

    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            async with db.execute(
                "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
                (user_id, start_date, end_date)
            ) as cursor:
                submitted = (await cursor.fetchone())[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
            async with db.execute(
                "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ? AND status = '–ü—Ä–∏–Ω—è—Ç'",
                (user_id, start_date, end_date)
            ) as cursor:
                approved = (await cursor.fetchone())[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ
            async with db.execute(
                "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ? AND status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ'",
                (user_id, start_date, end_date)
            ) as cursor:
                in_revision = (await cursor.fetchone())[0]

        start = datetime.strptime(start_date, "%d.%m.%Y")
        end = datetime.strptime(end_date, "%d.%m.%Y")
        total_days = (end - start).days + 1
        missed = total_days - submitted

        caption = (
            f"üë§ <b>–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç</b>\n\n"
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n"
            f"‚úÖ <b>–°–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤:</b> {submitted}\n"
            f"‚úî <b>–ü—Ä–∏–Ω—è—Ç–æ –æ—Ç—á—ë—Ç–æ–≤:</b> {approved}\n"
            f"‚úè <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ:</b> {in_revision}\n"
            f"‚ùå <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤:</b> {missed}\n\n"
            f"üìÖ –†–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {total_days}"
        )
        
        await send_video(message, "personal_cabinet", caption)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ú–æ–∏ –ó–∞–¥–∞—á–∏ ===
@dp.message(F.text == "üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")
async def my_tasks(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            if not await cursor.fetchone():
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ /start")
                return

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                "SELECT task_type, task_text, task_date FROM tasks WHERE user_id = ? AND status = '–ù–æ–≤–∞—è' ORDER BY task_date DESC",
                (user_id,)
            ) as cursor:
                tasks = await cursor.fetchall()

        if not tasks:
            resp = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."
            await send_video(message, "tasks", resp)
            return

        response = "üìå <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
        for task_type, task_text, task_date in tasks:
            response += f"üìÖ <b>{task_date}</b>\n"
            response += f"üìã <i>{task_type}:</i> {task_text}\n\n"

        await send_video(message, "tasks", response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –ú–æ—Ç–∏–≤–∞—Ü–∏—è ===
@dp.message(F.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def send_motivation(message: types.Message):
    motivations = [
        "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ",
        "–¢—ã ‚Äî –∑–≤–µ–∑–¥–∞! –°–∏—è–π —è—Ä—á–µ! ‚ú®",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º! üèÜ",
        "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å! üìà",
        "–í–µ—Ä—å –≤ —Å–µ–±—è, –∏ –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üí´",
        "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üëç"
    ]
    motivation = random.choice(motivations)
    await send_video(message, "motivation", motivation)

# === –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def employee_rating(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç—á–µ—Ç–æ–≤
            async with db.execute(
                """SELECT u.full_name, COUNT(r.id) as report_count 
                FROM users u LEFT JOIN reports r ON u.user_id = r.user_id 
                GROUP BY u.user_id 
                ORDER BY report_count DESC"""
            ) as cursor:
                rating = await cursor.fetchall()

        if not rating:
            await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
            return

        response = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç—á—ë—Ç–æ–≤:</b>\n\n"
        for idx, (full_name, report_count) in enumerate(rating, start=1):
            response += f"{idx}. {full_name}: <b>{report_count}</b> –æ—Ç—á—ë—Ç–æ–≤\n"

        await message.answer(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã")
async def check_reports(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute(
                """SELECT id, full_name, photo_id, report_text, report_date 
                FROM reports 
                WHERE status = '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' AND report_date BETWEEN ? AND ? 
                ORDER BY report_date, full_name""",
                (start_date, end_date)
            ) as cursor:
                reports = await cursor.fetchall()

        if not reports:
            await message.answer("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
            return

        await state.update_data(reports=reports, current_report=0)
        await show_report(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_report(message: types.Message, state: FSMContext):
    data = await state.get_data()
    reports = data.get("reports", [])
    current_report = data.get("current_report", 0)
    
    if current_report >= len(reports):
        await message.answer(
            "‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.", 
            reply_markup=get_main_keyboard(is_admin=True)
        )
        await state.clear()
        return
    
    report_id, full_name, photo_id, report_text, report_date = reports[current_report]
    
    caption = f"üìù <b>–û—Ç—á—ë—Ç –æ—Ç {full_name}</b>\nüìÖ <i>{report_date}</i>"
    if report_text:
        caption += f"\n\n{report_text}"
    
    try:
        if photo_id:
            await message.answer_photo(
                photo_id, 
                caption=caption,
                reply_markup=get_approval_keyboard()
            )
        else:
            await message.answer(
                caption,
                reply_markup=get_approval_keyboard()
            )
        
        await state.update_data(current_report_id=report_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        await message.answer(
            "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...",
            reply_markup=get_approval_keyboard()
        )
        await state.update_data(current_report=current_report + 1)
        await show_report(message, state)

@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
async def approve_report(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    data = await state.get_data()
    report_id = data.get("current_report_id")
    
    if not report_id:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç.")
        return

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "UPDATE reports SET status = '–ü—Ä–∏–Ω—è—Ç' WHERE id = ?",
                (report_id,)
            )
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç—á–µ—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            async with db.execute(
                "SELECT user_id, full_name, report_date FROM reports WHERE id = ?",
                (report_id,)
            ) as cursor:
                user_id, full_name, report_date = await cursor.fetchone()

        await message.answer("‚úÖ –û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç.")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} –ø—Ä–∏–Ω—è—Ç."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç
        await state.update_data(current_report=data.get("current_report", 0) + 1)
        await show_report(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –æ—Ç—á–µ—Ç–∞ {report_id}: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –î–æ—Ä–∞–±–æ—Ç–∫—É")
async def send_for_revision(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    await message.answer(
        "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=get_back_only_keyboard()
    )
    await state.set_state("waiting_for_revision_reason")

@dp.message(F.text, StateFilter("waiting_for_revision_reason"))
async def process_revision_reason(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return
    
    reason = message.text
    data = await state.get_data()
    report_id = data.get("current_report_id")
    
    if not report_id:
        await message.answer("‚ö† –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç.")
        return

    try:
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "UPDATE reports SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ' WHERE id = ?",
                (report_id,)
            )
            await db.commit()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Ç—á–µ—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            async with db.execute(
                "SELECT user_id, full_name, report_date FROM reports WHERE id = ?",
                (report_id,)
            ) as cursor:
                user_id, full_name, report_date = await cursor.fetchone()

        await message.answer(
            "üîÑ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.",
            reply_markup=get_approval_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
        try:
            await bot.send_message(
                user_id,
                f"üîÑ –í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.\n"
                f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç
        await state.update_data(current_report=data.get("current_report", 0) + 1)
        await show_report(message, state)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É {report_id}: {e}")
        await message.answer(
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_approval_keyboard()
        )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await init_db()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ –±—ã–ª)
    await bot.delete_webhook(drop_pending_updates=True)
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
