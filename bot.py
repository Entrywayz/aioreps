import asyncio
import logging
import aiosqlite
import aiocron
from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMINS = list(map(int, getenv("ADMINS", "").split(","))) if getenv("ADMINS") else []
DB_PATH = getenv("DB_PATH", "reports.db")
EMPLOYEE_CODE = str(getenv("EMPLOYEE_CODE"))  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
logging.info(f"–ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ .env: {EMPLOYEE_CODE}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_employee_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")],
            [KeyboardButton(text="üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")],
            [KeyboardButton(text="üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")]
        ],
        resize_keyboard=True
    )

def get_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏")]
        ],
        resize_keyboard=True
    )

def get_report_period_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –ù–µ–¥–µ–ª—è")],
            [KeyboardButton(text="üìÜ –í—ã–±—Ä–∞—Ç—å –ü–µ—Ä–∏–æ–¥")]
        ],
        resize_keyboard=True
    )

def get_task_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –û—Å–Ω–æ–≤–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ó–∞–¥–∞—á–∞")]
        ],
        resize_keyboard=True
    )

def get_approval_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å")],
            [KeyboardButton(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –î–æ—Ä–∞–±–æ—Ç–∫—É")]
        ],
        resize_keyboard=True
    )

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL,
                position TEXT NOT NULL DEFAULT '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                full_name TEXT NOT NULL,
                photo_id TEXT,
                report_text TEXT,
                report_date TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        await db.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                task_type TEXT NOT NULL,
                task_text TEXT NOT NULL,
                task_date TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è',
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        await db.commit()

# === –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ ===
async def get_employees():
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id, full_name, position FROM users") as cursor:
            employees = await cursor.fetchall()
    return employees

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    full_name = message.from_user.full_name

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (ID: {user_id}) –Ω–∞–∂–∞–ª /start")

    if user_id in ADMINS:
        await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω {full_name}!", reply_markup=get_admin_keyboard())
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user = await cursor.fetchone()

    if user:
        await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user[0]}!", reply_markup=get_employee_keyboard())
    else:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        await state.set_state("waiting_for_code")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===
@dp.message(F.text, StateFilter("waiting_for_code"))
async def process_registration_code(message: types.Message, state: FSMContext):
    user_input = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if user_input == EMPLOYEE_CODE:  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –∫–æ–¥–æ–º –∏–∑ .env
        user_id = message.from_user.id
        full_name = message.from_user.full_name

        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute("INSERT INTO users (user_id, full_name) VALUES (?, ?)", (user_id, full_name))
            await db.commit()

        await message.answer(f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!", reply_markup=get_employee_keyboard())
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç ===
@dp.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")
async def send_report(message: types.Message, state: FSMContext):
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞:")
    await state.set_state("waiting_for_photo_or_text")

@dp.message(F.photo, StateFilter("waiting_for_photo_or_text"))
async def receive_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞):")
    await state.set_state("waiting_for_text")

@dp.message(F.text, StateFilter("waiting_for_text", "waiting_for_photo_or_text"))
async def receive_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get('photo_id')
    report_text = message.text
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    today = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT INTO reports (user_id, full_name, photo_id, report_text, report_date) VALUES (?, ?, ?, ?, ?)",
            (user_id, full_name, photo_id, report_text, today)
        )
        await db.commit()

    await message.answer("‚úÖ –í–∞—à –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=get_employee_keyboard())
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ –Ω–æ–≤–æ–º –æ—Ç—á–µ—Ç–µ
    for admin_id in ADMINS:
        await bot.send_message(admin_id, f"üì• –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç {full_name}.\nüìÖ –î–∞—Ç–∞: {today}")

# === –ú–æ–∏ –û—Ç—á–µ—Ç—ã ===
@dp.message(F.text == "üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")
async def my_reports(message: types.Message):
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT report_date, report_text FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()

    if not reports:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.")
        return

    response = "üìä –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n"
    for report_date, report_text in reports:
        response += f"üìÖ {report_date}\nüìù {report_text}\n\n"

    await message.answer(response)

# === –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç ===
@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            submitted = (await cursor.fetchone())[0]

        start = datetime.strptime(start_date, "%d.%m.%Y")
        end = datetime.strptime(end_date, "%d.%m.%Y")
        total_days = (end - start).days + 1
        missed = total_days - submitted

    response = (
        f"üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n"
        f"‚úÖ –°–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {submitted}\n"
        f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {missed}"
    )
    await message.answer(response)

# === –ú–æ–∏ –ó–∞–¥–∞—á–∏ ===
@dp.message(F.text == "üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")
async def my_tasks(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT task_type, task_text, task_date FROM tasks WHERE user_id = ? AND status = '–ù–æ–≤–∞—è'",
            (user_id,)
        ) as cursor:
            tasks = await cursor.fetchall()

    if not tasks:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.")
        return

    response = "üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    for task_type, task_text, task_date in tasks:
        response += f"üìÖ {task_date}\nüìã {task_type}: {task_text}\n\n"

    await message.answer(response)

# === –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã (–ê–¥–º–∏–Ω) ===
@dp.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã")
async def view_reports(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_report_period_keyboard())

@dp.message(F.text == "üìÖ –¢–µ–∫—É—â–∞—è –ù–µ–¥–µ–ª—è")
async def current_week_reports(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")

    await send_reports(message, start_date, end_date)

@dp.message(F.text == "üìÜ –í—ã–±—Ä–∞—Ç—å –ü–µ—Ä–∏–æ–¥")
async def select_period_reports(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    await message.answer("üìÜ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì")
    await state.set_state("waiting_for_period")

@dp.message(F.text, StateFilter("waiting_for_period"))
async def process_period(message: types.Message, state: FSMContext):
    try:
        start_date, end_date = message.text.split(" - ")
        await send_reports(message, start_date, end_date)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì")

async def send_reports(message: types.Message, start_date: str, end_date: str):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT full_name, photo_id, report_text, report_date FROM reports WHERE report_date BETWEEN ? AND ? ORDER BY full_name",
            (start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()

    if not reports:
        await message.answer(f"üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}.")
        return

    grouped_reports = {}
    for full_name, photo_id, report_text, report_date in reports:
        if full_name not in grouped_reports:
            grouped_reports[full_name] = []
        entry = f"üìÖ {report_date}"
        if report_text:
            entry += f"\nüìù {report_text}"
        grouped_reports[full_name].append((entry, photo_id))

    for full_name, entries in grouped_reports.items():
        caption = f"üë§ {full_name}\nüìä –û—Ç—á—ë—Ç—ã –∑–∞ {start_date} - {end_date}:\n"
        for entry, photo_id in entries:
            if photo_id:
                await bot.send_photo(message.chat.id, photo=photo_id, caption=entry)
            else:
                caption += f"\n{entry}\n"
        if caption.strip():
            await message.answer(caption)

# === –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏ (–ê–¥–º–∏–Ω) ===
@dp.message(F.text == "üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏")
async def send_tasks(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    await message.answer("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=get_task_type_keyboard())
    await state.set_state("waiting_for_task_type")

@dp.message(F.text, StateFilter("waiting_for_task_type"))
async def select_task_type(message: types.Message, state: FSMContext):
    task_type = message.text
    await state.update_data(task_type=task_type)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state("waiting_for_task_text")

@dp.message(F.text, StateFilter("waiting_for_task_text"))
async def select_task_text(message: types.Message, state: FSMContext):
    task_text = message.text
    data = await state.get_data()
    task_type = data["task_type"]

    employees = await get_employees()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=full_name)] for _, full_name, _ in employees],
        resize_keyboard=True
    )
    await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=keyboard)
    await state.update_data(task_text=task_text, task_type=task_type)
    await state.set_state("waiting_for_employee")

@dp.message(F.text, StateFilter("waiting_for_employee"))
async def assign_task(message: types.Message, state: FSMContext):
    full_name = message.text
    data = await state.get_data()
    task_type = data["task_type"]
    task_text = data["task_text"]

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT user_id FROM users WHERE full_name = ?", (full_name,)) as cursor:
            user_id = (await cursor.fetchone())[0]

        await db.execute(
            "INSERT INTO tasks (user_id, task_type, task_text, task_date) VALUES (?, ?, ?, ?)",
            (user_id, task_type, task_text, datetime.now().strftime("%d.%m.%Y"))
        )
        await db.commit()

    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {full_name}.", reply_markup=get_admin_keyboard())
    await state.clear()

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
