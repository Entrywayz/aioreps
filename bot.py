import asyncio
import logging
import aiosqlite
from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMINS = list(map(int, getenv("ADMINS", "").split(","))) if getenv("ADMINS") else []
DB_PATH = getenv("DB_PATH", "reports.db")
EMPLOYEE_CODE = str(getenv("EMPLOYEE_CODE"))

# –°–ª–æ–≤–∞—Ä—å —Å video file_id
VIDEO_MESSAGES = {
    "personal_cabinet": "lc.mp4",
    "my_reports": "reports.mp4",
    "reports": "report.mp4",
    "tasks": "tasks.mp4",
    "motivation": "motivation.mp4"
}

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_employee_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")],
            [KeyboardButton(text="üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")],
            [KeyboardButton(text="üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    
    if user_id in ADMINS:
        await message.answer(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω {full_name}!")
        return
        
    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {full_name}!", reply_markup=get_employee_keyboard())

# === –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç ===
@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")
async def personal_cabinet(message: types.Message):
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            submitted = (await cursor.fetchone())[0]
        
        total_days = (datetime.strptime(end_date, "%d.%m.%Y") - 
                      datetime.strptime(start_date, "%d.%m.%Y")).days + 1
        missed = total_days - submitted
    
    caption = (
        f"üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç\n\n"
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
        f"‚úÖ –°–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {submitted}\n\n"
        f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤: {missed}"
    )
    await message.answer_video(video=VIDEO_MESSAGES["personal_cabinet"], caption=caption)

# === –ú–æ–∏ –û—Ç—á–µ—Ç—ã ===
@dp.message(F.text == "üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")
async def my_reports(message: types.Message):
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT report_date, report_text, status FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()
    
    if not reports:
        caption = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."
    else:
        caption = "üìä –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n"
        for report_date, report_text, status in reports:
            caption += f"üìÖ {report_date}\nüìù {report_text}\nüîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await message.answer_video(video=VIDEO_MESSAGES["my_reports"], caption=caption)

# === –ú–æ–∏ –ó–∞–¥–∞—á–∏ ===
@dp.message(F.text == "üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")
async def my_tasks(message: types.Message):
    user_id = message.from_user.id
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT task_type, task_text, task_date FROM tasks WHERE user_id = ? AND status = '–ù–æ–≤–∞—è'",
            (user_id,)
        ) as cursor:
            tasks = await cursor.fetchall()
    
    if not tasks:
        caption = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á."
    else:
        caption = "üìå –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for task_type, task_text, task_date in tasks:
            caption += f"üìÖ {task_date}\nüìã {task_type}: {task_text}\n\n"
    
    await message.answer_video(video=VIDEO_MESSAGES["tasks"], caption=caption)

# === –ú–æ—Ç–∏–≤–∞—Ü–∏—è ===
@dp.message(F.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def send_motivation(message: types.Message):
    motivations = [
        "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ",
        "–¢—ã ‚Äî –∑–≤–µ–∑–¥–∞! –°–∏—è–π —è—Ä—á–µ! ‚ú®",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º! üèÜ"
    ]
    motivation = random.choice(motivations)
    
    await message.answer_video(video=VIDEO_MESSAGES["motivation"], caption=motivation)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
