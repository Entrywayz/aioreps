import asyncio
import logging
import aiosqlite
import os
import aiocron
import random
from datetime import datetime, timedelta
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from pathlib import Path
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
load_dotenv()
TOKEN = getenv("BOT_TOKEN")
ADMINS = list(map(int, getenv("ADMINS", "").split(","))) if getenv("ADMINS") else []
DB_PATH = getenv("DB_PATH", "reports.db")
EMPLOYEE_CODE = str(getenv("EMPLOYEE_CODE", "0000"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—É—Ç–∏ –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º
MEDIA_FILES = {
    "personal_cabinet": "lc.mp4",
    "my_reports": "reports.mp4",
    "reports": "report.mp4",
    "tasks": "tasks.mp4",
    "motivation": "motivation.mp4"
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    waiting_task_type = State()
    waiting_task_text = State()
    waiting_task_assign = State()
    waiting_report_period = State()
    waiting_custom_period = State()
    waiting_revision_reason = State()

class UserStates(StatesGroup):
    waiting_for_code = State()
    waiting_for_photo_or_text = State()
    waiting_for_text = State()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def send_media(message: types.Message, media_key: str, caption: str = "") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    try:
        current_dir = Path(__file__).parent
        media_filename = MEDIA_FILES.get(media_key)
        
        if not media_filename:
            logger.error(f"Unknown media key: {media_key}")
            return False
        
        media_path = current_dir / media_filename
        if not media_path.exists():
            logger.error(f"Media file not found: {media_path}")
            await message.answer("‚ö† –ú–µ–¥–∏–∞—Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        media = FSInputFile(path=str(media_path))
        
        if media_path.suffix == ".mp4":
            await message.answer_video(video=media, caption=caption, supports_streaming=True)
        else:
            await message.answer_photo(photo=media, caption=caption)
            
        return True
    
    except Exception as e:
        logger.error(f"Error sending media {media_key}: {str(e)}")
        await message.answer(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª. {caption}")
        return False

async def notify_admins(text: str, exclude_id: int = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º"""
    for admin_id in ADMINS:
        if admin_id != exclude_id:
            try:
                await bot.send_message(admin_id, text)
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id}: {e}")

async def get_user_name(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT full_name FROM users WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_keyboard(is_admin: bool = False):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if is_admin:
        buttons = [
            [KeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏")],
            [KeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")],
            [KeyboardButton(text="üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã"), KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")],
            [KeyboardButton(text="üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏"), KeyboardButton(text="üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")]
        ]
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )

def get_report_period_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –ù–µ–¥–µ–ª—è")],
            [KeyboardButton(text="üìÜ –í—ã–±—Ä–∞—Ç—å –ü–µ—Ä–∏–æ–¥")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_task_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –û—Å–Ω–æ–≤–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ó–∞–¥–∞—á–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_approval_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å"), KeyboardButton(text="üîÑ –î–æ—Ä–∞–±–æ—Ç–∫–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_users_keyboard(users: list):
    """–ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = []
    for user_id, full_name in users:
        keyboard.append([InlineKeyboardButton(text=full_name, callback_data=f"user_{user_id}")])
    keyboard.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                full_name TEXT NOT NULL,
                position TEXT NOT NULL DEFAULT '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                register_date TEXT DEFAULT CURRENT_TIMESTAMP
            )""")
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                full_name TEXT NOT NULL,
                photo_id TEXT,
                report_text TEXT,
                report_date TEXT NOT NULL,
                status TEXT NOT NULL DEFAULT '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                task_type TEXT NOT NULL,
                task_text TEXT NOT NULL,
                task_date TEXT NOT NULL,
                deadline TEXT,
                status TEXT NOT NULL DEFAULT '–ù–æ–≤–∞—è',
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        
        await db.execute("""
            CREATE TABLE IF NOT EXISTS notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                message TEXT NOT NULL,
                is_read BOOLEAN DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(user_id)
            )""")
        
        await db.commit()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start", "help"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    
    logger.info(f"User {full_name} (ID: {user_id}) started the bot")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
    if user_id in ADMINS:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {full_name}!",
            reply_markup=get_main_keyboard(is_admin=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,)) as cursor:
            user_exists = await cursor.fetchone()
    
    if user_exists:
        await message.answer(
            f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {full_name}!",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(UserStates.waiting_for_code)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.message(F.text, UserStates.waiting_for_code)
async def process_employee_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    user_input = message.text.strip()
    
    if user_input == EMPLOYEE_CODE:
        user_id = message.from_user.id
        full_name = message.from_user.full_name
        
        async with aiosqlite.connect(DB_PATH) as db:
            await db.execute(
                "INSERT INTO users (user_id, full_name) VALUES (?, ?)",
                (user_id, full_name)
            )
            await db.commit()
        
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        await notify_admins(f"üÜï –ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: {full_name} (ID: {user_id})")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ ===
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = message.from_user.id
    await state.clear()
    
    if user_id in ADMINS:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard(is_admin=True)
    else:
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard())

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ ===
@dp.message(F.text == "üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –û—Ç—á–µ—Ç")
async def start_report(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    caption = "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á—ë—Ç–∞:"
    await send_media(message, "my_reports", caption)
    await message.answer(caption, reply_markup=get_back_keyboard())
    await state.set_state(UserStates.waiting_for_photo_or_text)

@dp.message(F.photo, UserStates.waiting_for_photo_or_text)
async def receive_report_photo(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç—á–µ—Ç–∞"""
    await state.update_data(photo_id=message.photo[-1].file_id)
    await message.answer(
        "‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'):",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(UserStates.waiting_for_text)

@dp.message(F.text, UserStates.waiting_for_text)
async def receive_report_text(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return
    
    data = await state.get_data()
    photo_id = data.get('photo_id')
    report_text = message.text if message.text.lower() != "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è" else None
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    today = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """INSERT INTO reports 
            (user_id, full_name, photo_id, report_text, report_date, status) 
            VALUES (?, ?, ?, ?, ?, ?)""",
            (user_id, full_name, photo_id, report_text, today, "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        )
        await db.commit()
    
    await message.answer(
        "‚úÖ –í–∞—à –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    await notify_admins(f"üì• –ù–æ–≤—ã–π –æ—Ç—á—ë—Ç –æ—Ç {full_name}\nüìÖ –î–∞—Ç–∞: {today}")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.message(F.text == "üìä –ú–æ–∏ –û—Ç—á–µ—Ç—ã")
async def show_user_reports(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"""
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """SELECT report_date, report_text, status 
            FROM reports 
            WHERE user_id = ? AND report_date BETWEEN ? AND ?
            ORDER BY report_date DESC""",
            (user_id, start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()
    
    if not reports:
        caption = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é."
        await send_media(message, "reports", caption)
        return
    
    response = "üìä –í–∞—à–∏ –æ—Ç—á—ë—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"
    for report_date, report_text, status in reports:
        response += f"üìÖ <b>{report_date}</b>\n"
        if report_text:
            response += f"üìù {report_text}\n"
        response += f"üîÑ –°—Ç–∞—Ç—É—Å: {status}\n\n"
    
    await send_media(message, "reports", response)

# === –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ===
@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")
async def show_personal_cabinet(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    user_id = message.from_user.id
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—á–µ—Ç–æ–≤
        async with db.execute(
            "SELECT COUNT(*) FROM reports WHERE user_id = ? AND report_date BETWEEN ? AND ?",
            (user_id, start_date, end_date)
        ) as cursor:
            submitted = (await cursor.fetchone())[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        async with db.execute(
            "SELECT position, register_date FROM users WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            user_info = await cursor.fetchone()
    
    position = user_info[0] if user_info else "–°–æ—Ç—Ä—É–¥–Ω–∏–∫"
    register_date = user_info[1] if user_info else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    start = datetime.strptime(start_date, "%d.%m.%Y")
    end = datetime.strptime(end_date, "%d.%m.%Y")
    total_days = (end - start).days + 1
    missed = total_days - submitted
    
    caption = (
        f"üë§ <b>–õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"üßë‚Äçüíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {position}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {register_date}\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:</b>\n"
        f"‚úÖ <b>–°–¥–∞–Ω–æ –æ—Ç—á—ë—Ç–æ–≤:</b> {submitted}\n"
        f"‚ùå <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ—Ç—á—ë—Ç–æ–≤:</b> {missed}"
    )
    
    await send_media(message, "personal_cabinet", caption)

# === –ú–æ–∏ –∑–∞–¥–∞—á–∏ ===
@dp.message(F.text == "üìå –ú–æ–∏ –ó–∞–¥–∞—á–∏")
async def show_user_tasks(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """SELECT task_type, task_text, task_date, deadline, status 
            FROM tasks 
            WHERE user_id = ? AND status != '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
            ORDER BY task_date DESC""",
            (user_id,)
        ) as cursor:
            tasks = await cursor.fetchall()
    
    if not tasks:
        caption = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á."
        await send_media(message, "tasks", caption)
        return
    
    response = "üìå <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    for task_type, task_text, task_date, deadline, status in tasks:
        response += f"üìÖ <b>{task_date}</b>\n"
        response += f"üìã <b>{task_type}:</b> {task_text}\n"
        if deadline:
            response += f"‚è≥ <b>–°—Ä–æ–∫:</b> {deadline}\n"
        response += f"üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
    
    await send_media(message, "tasks", response)

# === –ú–æ—Ç–∏–≤–∞—Ü–∏—è ===
@dp.message(F.text == "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
async def send_motivation(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    motivations = [
        "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ",
        "–¢—ã ‚Äî –∑–≤–µ–∑–¥–∞! –°–∏—è–π —è—Ä—á–µ! ‚ú®",
        "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –≤–µ–¥—É—Ç –∫ –±–æ–ª—å—à–∏–º –ø–æ–±–µ–¥–∞–º! üèÜ"
    ]
    motivation = random.choice(motivations)
    await send_media(message, "motivation", motivation)

# === –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

# –†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
@dp.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
async def show_employee_rating(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç—á–µ—Ç–æ–≤"""
    if message.from_user.id not in ADMINS:
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """SELECT full_name, COUNT(*) as report_count 
            FROM reports 
            WHERE report_date BETWEEN date('now', 'weekday 0', '-7 days') AND date('now')
            GROUP BY user_id 
            ORDER BY report_count DESC"""
        ) as cursor:
            rating = await cursor.fetchall()
    
    if not rating:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        return
    
    response = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:</b>\n\n"
    for idx, (full_name, report_count) in enumerate(rating, start=1):
        response += f"{idx}. {full_name}: <b>{report_count}</b> –æ—Ç—á—ë—Ç–æ–≤\n"
    
    await message.answer(response)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
@dp.message(F.text == "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û—Ç—á–µ—Ç—ã")
async def start_reports_check(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    if message.from_user.id not in ADMINS:
        return
    
    start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
    end_date = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """SELECT id, full_name, photo_id, report_text, report_date 
            FROM reports 
            WHERE status = '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' 
            AND report_date BETWEEN ? AND ?
            ORDER BY report_date""",
            (start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()
    
    if not reports:
        await message.answer("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return
    
    await state.update_data(reports=reports, current_report=0)
    await show_next_report(message, state)

async def show_next_report(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    data = await state.get_data()
    reports = data.get("reports", [])
    current_report = data.get("current_report", 0)
    
    if current_report >= len(reports):
        await message.answer(
            "‚úÖ –í—Å–µ –æ—Ç—á–µ—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.",
            reply_markup=get_main_keyboard(is_admin=True)
        await state.clear()
        return
    
    report_id, full_name, photo_id, report_text, report_date = reports[current_report]
    
    caption = f"üìù <b>–û—Ç—á—ë—Ç –æ—Ç {full_name}</b>\nüìÖ <b>–î–∞—Ç–∞:</b> {report_date}"
    if report_text:
        caption += f"\n\n{report_text}"
    
    await state.update_data(current_report_id=report_id)
    
    if photo_id:
        await message.answer_photo(
            photo_id,
            caption=caption,
            reply_markup=get_approval_keyboard())
    else:
        await message.answer(
            caption,
            reply_markup=get_approval_keyboard())

# –ü—Ä–∏–Ω—è—Ç–∏–µ –æ—Ç—á–µ—Ç–∞
@dp.message(F.text == "‚úÖ –ü—Ä–∏–Ω—è—Ç—å")
async def approve_report(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç—á–µ—Ç"""
    data = await state.get_data()
    report_id = data.get("current_report_id")
    
    if not report_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç.")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
        await db.execute(
            "UPDATE reports SET status = '–ü—Ä–∏–Ω—è—Ç' WHERE id = ?",
            (report_id,)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        async with db.execute(
            "SELECT user_id, report_date FROM reports WHERE id = ?",
            (report_id,)
        ) as cursor:
            user_id, report_date = await cursor.fetchone()
        
        await db.commit()
    
    await message.answer("‚úÖ –û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç.")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} –±—ã–ª –ø—Ä–∏–Ω—è—Ç.")
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç
    await state.update_data(current_report=data.get("current_report", 0) + 1)
    await show_next_report(message, state)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
@dp.message(F.text == "üîÑ –î–æ—Ä–∞–±–æ—Ç–∫–∞")
async def request_revision(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫—É –æ—Ç—á–µ—Ç–∞"""
    await message.answer(
        "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:",
        reply_markup=get_back_keyboard())
    await state.set_state(AdminStates.waiting_revision_reason)

@dp.message(F.text, AdminStates.waiting_revision_reason)
async def process_revision_reason(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –¥–æ—Ä–∞–±–æ—Ç–∫–∏"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await show_next_report(message, state)
        return
    
    reason = message.text
    data = await state.get_data()
    report_id = data.get("current_report_id")
    
    if not report_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç.")
        return
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
        await db.execute(
            "UPDATE reports SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ' WHERE id = ?",
            (report_id,)
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        async with db.execute(
            "SELECT user_id, report_date FROM reports WHERE id = ?",
            (report_id,)
        ) as cursor:
            user_id, report_date = await cursor.fetchone()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            """INSERT INTO notifications (user_id, message)
            VALUES (?, ?)""",
            (user_id, f"–í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        )
        
        await db.commit()
    
    await message.answer(
        "üîÑ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.",
        reply_markup=get_approval_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try:
        await bot.send_message(
            user_id,
            f"üîÑ –í–∞—à –æ—Ç—á—ë—Ç –∑–∞ {report_date} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}")
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç—á–µ—Ç
    await state.update_data(current_report=data.get("current_report", 0) + 1)
    await show_next_report(message, state)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á
@dp.message(F.text == "üìå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ó–∞–¥–∞—á–∏")
async def start_task_creation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=get_task_type_keyboard())
    await state.set_state(AdminStates.waiting_task_type)

@dp.message(F.text, AdminStates.waiting_task_type)
async def process_task_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return
    
    if message.text not in ["üìã –û—Å–Ω–æ–≤–Ω–∞—è –ó–∞–¥–∞—á–∞", "üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ó–∞–¥–∞—á–∞"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await state.update_data(task_type=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=get_back_keyboard())
    await state.set_state(AdminStates.waiting_task_text)

@dp.message(F.text, AdminStates.waiting_task_text)
async def process_task_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.waiting_task_type)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
            reply_markup=get_task_type_keyboard())
        return
    
    await state.update_data(task_text=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            "SELECT user_id, full_name FROM users ORDER BY full_name"
        ) as cursor:
            users = await cursor.fetchall()
    
    if not users:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.")
        await state.clear()
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:",
        reply_markup=get_users_keyboard(users))
    await state.set_state(AdminStates.waiting_task_assign)

@dp.callback_query(F.data.startswith("user_"), AdminStates.waiting_task_assign)
async def assign_task(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∑–∞–¥–∞—á—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if callback.data == "cancel":
        await callback.message.edit_text("‚ùå –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return
    
    user_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    task_type = data.get("task_type")
    task_text = data.get("task_text")
    task_date = datetime.now().strftime("%d.%m.%Y")
    
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            """INSERT INTO tasks 
            (user_id, task_type, task_text, task_date, status) 
            VALUES (?, ?, ?, ?, ?)""",
            (user_id, task_type, task_text, task_date, "–ù–æ–≤–∞—è")
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        async with db.execute(
            "SELECT full_name FROM users WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            full_name = (await cursor.fetchone())[0]
        
        await db.commit()
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {full_name}.")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    try:
        await bot.send_message(
            user_id,
            f"üìå –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n\n"
            f"<b>–¢–∏–ø:</b> {task_type}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task_text}")
    except Exception as e:
        logger.error(f"Failed to notify user {user_id}: {e}")
    
    await state.clear()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
@dp.message(F.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç—á–µ—Ç—ã")
async def start_reports_view(message: types.Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if message.from_user.id not in ADMINS:
        return
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=get_report_period_keyboard())
    await state.set_state(AdminStates.waiting_report_period)

@dp.message(F.text, AdminStates.waiting_report_period)
async def process_report_period(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await back_handler(message, state)
        return
    
    if message.text == "üìÖ –¢–µ–∫—É—â–∞—è –ù–µ–¥–µ–ª—è":
        start_date = (datetime.now() - timedelta(days=datetime.now().weekday())).strftime("%d.%m.%Y")
        end_date = datetime.now().strftime("%d.%m.%Y")
        await show_reports_for_period(message, start_date, end_date)
        await state.clear()
    elif message.text == "üìÜ –í—ã–±—Ä–∞—Ç—å –ü–µ—Ä–∏–æ–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2023-31.01.2023):",
            reply_markup=get_back_keyboard())
        await state.set_state(AdminStates.waiting_custom_period)

@dp.message(F.text, AdminStates.waiting_custom_period)
async def process_custom_period(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.waiting_report_period)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤:",
            reply_markup=get_report_period_keyboard())
        return
    
    try:
        start_date, end_date = message.text.split("-")
        datetime.strptime(start_date.strip(), "%d.%m.%Y")
        datetime.strptime(end_date.strip(), "%d.%m.%Y")
        await show_reports_for_period(message, start_date.strip(), end_date.strip())
        await state.clear()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì-–î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2023-31.01.2023)")

async def show_reports_for_period(message: types.Message, start_date: str, end_date: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute(
            """SELECT full_name, report_date, report_text, status 
            FROM reports 
            WHERE report_date BETWEEN ? AND ?
            ORDER BY report_date DESC, full_name""",
            (start_date, end_date)
        ) as cursor:
            reports = await cursor.fetchall()
    
    if not reports:
        await message.answer(
            f"üì≠ –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}.")
        return
    
    response = f"üìä <b>–û—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date} –ø–æ {end_date}:</b>\n\n"
    
    current_date = None
    for full_name, report_date, report_text, status in reports:
        if report_date != current_date:
            response += f"\nüìÖ <b>{report_date}</b>\n"
            current_date = report_date
        
        response += f"üë§ <b>{full_name}</b>\n"
        if report_text:
            response += f"üìù {report_text}\n"
        response += f"üîÑ {status}\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
    else:
        await message.answer(response)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await init_db()
    await notify_admins("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    logger.info("Bot started")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    await notify_admins("‚ö† –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    logger.info("Bot stopped")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await on_startup()
    
    try:
        await dp.start_polling(bot)
    finally:
        await on_shutdown()

if __name__ == "__main__":
    asyncio.run(main())
